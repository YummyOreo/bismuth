---
source: bismuth-custom/src/lib.rs
expression: customs
---
Parser {
    lexer: Lexer {
        path: "/test/",
        chars: [
            '%',
            '{',
            '{',
            '\n',
            'n',
            'a',
            'm',
            'e',
            ':',
            ' ',
            'n',
            'a',
            'v',
            'b',
            'a',
            'r',
            '\n',
            'o',
            't',
            'h',
            'e',
            'r',
            ':',
            ' ',
            'k',
            'e',
            'y',
            '\n',
            '}',
            '}',
            '\n',
        ],
        position: 31,
        current_token: Token {
            start: 31,
            end: 31,
            kind: EndOfFile,
            text: [],
        },
        tokens: [
            Token {
                start: 0,
                end: 0,
                kind: StartOfFile,
                text: [],
            },
            Token {
                start: 0,
                end: 0,
                kind: Percent,
                text: [
                    '%',
                ],
            },
            Token {
                start: 1,
                end: 2,
                kind: CurlybraceLeft,
                text: [
                    '{',
                    '{',
                ],
            },
            Token {
                start: 3,
                end: 3,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 4,
                end: 15,
                kind: Text,
                text: [
                    'n',
                    'a',
                    'm',
                    'e',
                    ':',
                    ' ',
                    'n',
                    'a',
                    'v',
                    'b',
                    'a',
                    'r',
                ],
            },
            Token {
                start: 16,
                end: 16,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 17,
                end: 26,
                kind: Text,
                text: [
                    'o',
                    't',
                    'h',
                    'e',
                    'r',
                    ':',
                    ' ',
                    'k',
                    'e',
                    'y',
                ],
            },
            Token {
                start: 27,
                end: 27,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 28,
                end: 29,
                kind: CurlybraceRight,
                text: [
                    '}',
                    '}',
                ],
            },
            Token {
                start: 30,
                end: 30,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 31,
                end: 31,
                kind: EndOfFile,
                text: [],
            },
        ],
    },
    index: 10,
    metadata: Metadata {
        absolute_path: "/test/",
        fontmatter: FontMatter {
            title: Some(
                "test",
            ),
            path: Some(
                "/test/",
            ),
            kind: Some(
                "default",
            ),
            values: None,
        },
    },
    current_element: None,
    state: State {
        new_line: true,
        inside: [],
        indent_level: 0,
    },
    has_custom: true,
    ast: Ast {
        elements: [
            Element {
                kind: CustomElement(
                    CustomElm {
                        name: "navbar",
                        values: {
                            "other": "key",
                        },
                        body: None,
                        template: None,
                    },
                ),
                elements: [
                    Element {
                        kind: Text,
                        elements: [],
                        text: Some(
                            "other: key",
                        ),
                        attrs: {},
                        id: [redacted],
                    },
                ],
                text: None,
                attrs: {},
                id: [redacted],
            },
            Element {
                kind: EndOfLine,
                elements: [],
                text: None,
                attrs: {},
                id: [redacted],
            },
        ],
    },
}
