---
source: bismuth-parser/src/lib.rs
expression: snapshot(parser)
---
Parser {
    lexer: Lexer {
        path: "/test/",
        chars: [
            '%',
            '{',
            '{',
            '\n',
            'n',
            'a',
            'm',
            'e',
            ':',
            ' ',
            't',
            'e',
            's',
            't',
            '\n',
            'o',
            't',
            'h',
            'e',
            'r',
            ':',
            ' ',
            'k',
            'e',
            'y',
            '\n',
            '-',
            '-',
            '-',
            '\n',
            'b',
            'o',
            'd',
            'y',
            '\n',
            't',
            'e',
            's',
            't',
            '\n',
            '}',
            '}',
        ],
        position: 42,
        current_token: Token {
            start: 42,
            end: 42,
            kind: EndOfFile,
            text: [],
        },
        tokens: [
            Token {
                start: 0,
                end: 0,
                kind: StartOfFile,
                text: [],
            },
            Token {
                start: 0,
                end: 0,
                kind: Percent,
                text: [
                    '%',
                ],
            },
            Token {
                start: 1,
                end: 2,
                kind: CurlybraceLeft,
                text: [
                    '{',
                    '{',
                ],
            },
            Token {
                start: 3,
                end: 3,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 4,
                end: 13,
                kind: Text,
                text: [
                    'n',
                    'a',
                    'm',
                    'e',
                    ':',
                    ' ',
                    't',
                    'e',
                    's',
                    't',
                ],
            },
            Token {
                start: 14,
                end: 14,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 15,
                end: 24,
                kind: Text,
                text: [
                    'o',
                    't',
                    'h',
                    'e',
                    'r',
                    ':',
                    ' ',
                    'k',
                    'e',
                    'y',
                ],
            },
            Token {
                start: 25,
                end: 25,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 26,
                end: 28,
                kind: Dash,
                text: [
                    '-',
                    '-',
                    '-',
                ],
            },
            Token {
                start: 29,
                end: 29,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 30,
                end: 33,
                kind: Text,
                text: [
                    'b',
                    'o',
                    'd',
                    'y',
                ],
            },
            Token {
                start: 34,
                end: 34,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 35,
                end: 38,
                kind: Text,
                text: [
                    't',
                    'e',
                    's',
                    't',
                ],
            },
            Token {
                start: 39,
                end: 39,
                kind: EndOfLine,
                text: [
                    '\n',
                ],
            },
            Token {
                start: 40,
                end: 41,
                kind: CurlybraceRight,
                text: [
                    '}',
                    '}',
                ],
            },
            Token {
                start: 42,
                end: 42,
                kind: EndOfFile,
                text: [],
            },
        ],
    },
    current_token_index: 15,
    metadata: Metadata {
        absolute_path: "/test/",
        fontmatter: FontMatter {
            title: Some(
                "test",
            ),
            path: Some(
                "/test/",
            ),
            kind: Some(
                "default",
            ),
            values: None,
        },
    },
    current_element: None,
    state: State {
        new_line: false,
        inside: [],
        indent_level: 0,
    },
    ast: Ast {
        elements: [
            Some(
                Element {
                    kind: CustomElement(
                        CustomElm {
                            name: "test",
                            values: {
                                "other": "key",
                            },
                            body: Some(
                                "body\ntest",
                            ),
                        },
                    ),
                    elements: [],
                    text: None,
                    attrs: {},
                    id: [Random],
                },
            ),
        ],
    },
}
