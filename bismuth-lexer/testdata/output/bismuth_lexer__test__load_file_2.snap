---
source: bismuth-lexer/src/lib.rs
expression: "snapshot(\"./testdata/tests/test3.md\")"
---
# h1 Heading 8-)↲
^ Token(Hash, "#", 0 -> 0)
 ^^^^^^^^^^^^^^ Token(Text, " h1 Heading 8-", 1 -> 14)
               ^ Token(ParenthesisRight, ")", 15 -> 15)
                ^ Token(EndOfLine, "\n", 16 -> 16)
## h2 Heading↲
^^ Token(Hash, "##", 17 -> 18)
  ^^^^^^^^^^^ Token(Text, " h2 Heading", 19 -> 29)
             ^ Token(EndOfLine, "\n", 30 -> 30)
### h3 Heading↲
^^^ Token(Hash, "###", 31 -> 33)
   ^^^^^^^^^^^ Token(Text, " h3 Heading", 34 -> 44)
              ^ Token(EndOfLine, "\n", 45 -> 45)
#### h4 Heading↲
^^^^ Token(Hash, "####", 46 -> 49)
    ^^^^^^^^^^^ Token(Text, " h4 Heading", 50 -> 60)
               ^ Token(EndOfLine, "\n", 61 -> 61)
##### h5 Heading↲
^^^^^ Token(Hash, "#####", 62 -> 66)
     ^^^^^^^^^^^ Token(Text, " h5 Heading", 67 -> 77)
                ^ Token(EndOfLine, "\n", 78 -> 78)
###### h6 Heading↲
^^^^^^ Token(Hash, "######", 79 -> 84)
      ^^^^^^^^^^^ Token(Text, " h6 Heading", 85 -> 95)
                 ^ Token(EndOfLine, "\n", 96 -> 96)
↲
^ Token(EndOfLine, "\n", 97 -> 97)
↲
^ Token(EndOfLine, "\n", 98 -> 98)
## Horizontal Rules↲
^^ Token(Hash, "##", 99 -> 100)
  ^^^^^^^^^^^^^^^^^ Token(Text, " Horizontal Rules", 101 -> 117)
                   ^ Token(EndOfLine, "\n", 118 -> 118)
↲
^ Token(EndOfLine, "\n", 119 -> 119)
---↲
^^^ Token(Dash, "---", 120 -> 122)
   ^ Token(EndOfLine, "\n", 123 -> 123)
↲
^ Token(EndOfLine, "\n", 124 -> 124)
!!!!!! ???? ,,  -- ---↲
^^^^^^^^^^^^^^^^^ Token(Text, "!!!!!! ???? ,,  -", 125 -> 141)
                 ^ Token(Dash, "-", 142 -> 142)
                  ^^^^ Token(Text, " ---", 143 -> 146)
                      ^ Token(EndOfLine, "\n", 147 -> 147)
↲
^ Token(EndOfLine, "\n", 148 -> 148)
"Smartypants, double quotes" and 'single quotes'↲
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, "\"Smartypants, double quotes\" and 'single quotes'", 149 -> 196)
                                                ^ Token(EndOfLine, "\n", 197 -> 197)
↲
^ Token(EndOfLine, "\n", 198 -> 198)
↲
^ Token(EndOfLine, "\n", 199 -> 199)
## Emphasis↲
^^ Token(Hash, "##", 200 -> 201)
  ^^^^^^^^^ Token(Text, " Emphasis", 202 -> 210)
           ^ Token(EndOfLine, "\n", 211 -> 211)
↲
^ Token(EndOfLine, "\n", 212 -> 212)
**This is bold text**↲
^^ Token(Asterisk, "**", 213 -> 214)
  ^^^^^^^^^^^^^^^^^ Token(Text, "This is bold text", 215 -> 231)
                   ^^ Token(Asterisk, "**", 232 -> 233)
                     ^ Token(EndOfLine, "\n", 234 -> 234)
↲
^ Token(EndOfLine, "\n", 235 -> 235)
__This is bold text__↲
^^ Token(Underscore, "__", 236 -> 237)
  ^^^^^^^^^^^^^^^^^ Token(Text, "This is bold text", 238 -> 254)
                   ^^ Token(Underscore, "__", 255 -> 256)
                     ^ Token(EndOfLine, "\n", 257 -> 257)
↲
^ Token(EndOfLine, "\n", 258 -> 258)
*This is italic text*↲
^ Token(Asterisk, "*", 259 -> 259)
 ^^^^^^^^^^^^^^^^^^^ Token(Text, "This is italic text", 260 -> 278)
                    ^ Token(Asterisk, "*", 279 -> 279)
                     ^ Token(EndOfLine, "\n", 280 -> 280)
↲
^ Token(EndOfLine, "\n", 281 -> 281)
_This is italic text_↲
^ Token(Underscore, "_", 282 -> 282)
 ^^^^^^^^^^^^^^^^^^^ Token(Text, "This is italic text", 283 -> 301)
                    ^ Token(Underscore, "_", 302 -> 302)
                     ^ Token(EndOfLine, "\n", 303 -> 303)
↲
^ Token(EndOfLine, "\n", 304 -> 304)
## Blockquotes↲
^^ Token(Hash, "##", 305 -> 306)
  ^^^^^^^^^^^^ Token(Text, " Blockquotes", 307 -> 318)
              ^ Token(EndOfLine, "\n", 319 -> 319)
↲
^ Token(EndOfLine, "\n", 320 -> 320)
↲
^ Token(EndOfLine, "\n", 321 -> 321)
> Blockquote...↲
^ Token(GreaterThan, ">", 322 -> 322)
 ^^^^^^^^^^^^^^ Token(Text, " Blockquote...", 323 -> 336)
               ^ Token(EndOfLine, "\n", 337 -> 337)
↲
^ Token(EndOfLine, "\n", 338 -> 338)
↲
^ Token(EndOfLine, "\n", 339 -> 339)
## Lists↲
^^ Token(Hash, "##", 340 -> 341)
  ^^^^^^ Token(Text, " Lists", 342 -> 347)
        ^ Token(EndOfLine, "\n", 348 -> 348)
↲
^ Token(EndOfLine, "\n", 349 -> 349)
Unordered↲
^^^^^^^^^ Token(Text, "Unordered", 350 -> 358)
         ^ Token(EndOfLine, "\n", 359 -> 359)
↲
^ Token(EndOfLine, "\n", 360 -> 360)
- Sub-lists are made by indenting 2 spaces:↲
^ Token(Dash, "-", 361 -> 361)
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Sub-lists are made by indenting 2 spaces:", 362 -> 403)
                                           ^ Token(EndOfLine, "\n", 404 -> 404)
    - Marker character change forces new list start:↲
^^^^ Token(Whitespace, "    ", 405 -> 408)
    ^ Token(Dash, "-", 409 -> 409)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Marker character change forces new list start:", 410 -> 456)
                                                    ^ Token(EndOfLine, "\n", 457 -> 457)
        - Facilisis in pretium nisl aliquet↲
^^^^^^^^ Token(Whitespace, "        ", 458 -> 465)
        ^ Token(Dash, "-", 466 -> 466)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Facilisis in pretium nisl aliquet", 467 -> 500)
                                           ^ Token(EndOfLine, "\n", 501 -> 501)
        - Nulla volutpat aliquam velit↲
^^^^^^^^ Token(Whitespace, "        ", 502 -> 509)
        ^ Token(Dash, "-", 510 -> 510)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Nulla volutpat aliquam velit", 511 -> 539)
                                      ^ Token(EndOfLine, "\n", 540 -> 540)
- Very easy!↲
^ Token(Dash, "-", 541 -> 541)
 ^^^^^^^^^^ Token(Text, " Very easy", 542 -> 551)
           ^ Token(Exclamation, "!", 552 -> 552)
            ^ Token(EndOfLine, "\n", 553 -> 553)
↲
^ Token(EndOfLine, "\n", 554 -> 554)
Ordered↲
^^^^^^^ Token(Text, "Ordered", 555 -> 561)
       ^ Token(EndOfLine, "\n", 562 -> 562)
↲
^ Token(EndOfLine, "\n", 563 -> 563)
1. Lorem ipsum dolor sit amet↲
^^ Token(ListNumber, "1.", 564 -> 565)
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Lorem ipsum dolor sit amet", 566 -> 592)
                             ^ Token(EndOfLine, "\n", 593 -> 593)
2. Consectetur adipiscing elit↲
^^ Token(ListNumber, "2.", 594 -> 595)
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Consectetur adipiscing elit", 596 -> 623)
                              ^ Token(EndOfLine, "\n", 624 -> 624)
3. Integer molestie lorem at massa↲
^^ Token(ListNumber, "3.", 625 -> 626)
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " Integer molestie lorem at massa", 627 -> 658)
                                  ^ Token(EndOfLine, "\n", 659 -> 659)
↲
^ Token(EndOfLine, "\n", 660 -> 660)
↲
^ Token(EndOfLine, "\n", 661 -> 661)
1. You can use sequential numbers...↲
^^ Token(ListNumber, "1.", 662 -> 663)
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " You can use sequential numbers...", 664 -> 697)
                                    ^ Token(EndOfLine, "\n", 698 -> 698)
1. ...or keep all the numbers as `1.`↲
^^ Token(ListNumber, "1.", 699 -> 700)
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, " ...or keep all the numbers as ", 701 -> 731)
                                 ^ Token(Backtick, "`", 732 -> 732)
                                  ^^ Token(Text, "1.", 733 -> 734)
                                    ^ Token(Backtick, "`", 735 -> 735)
                                     ^ Token(EndOfLine, "\n", 736 -> 736)
↲
^ Token(EndOfLine, "\n", 737 -> 737)
Start numbering with offset:↲
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, "Start numbering with offset:", 738 -> 765)
                            ^ Token(EndOfLine, "\n", 766 -> 766)
↲
^ Token(EndOfLine, "\n", 767 -> 767)
57. foo↲
^^^ Token(ListNumber, "57.", 768 -> 770)
   ^^^^ Token(Text, " foo", 771 -> 774)
       ^ Token(EndOfLine, "\n", 775 -> 775)
1. bar↲
^^ Token(ListNumber, "1.", 776 -> 777)
  ^^^^ Token(Text, " bar", 778 -> 781)
      ^ Token(EndOfLine, "\n", 782 -> 782)
↲
^ Token(EndOfLine, "\n", 783 -> 783)
↲
^ Token(EndOfLine, "\n", 784 -> 784)
## Code↲
^^ Token(Hash, "##", 785 -> 786)
  ^^^^^ Token(Text, " Code", 787 -> 791)
       ^ Token(EndOfLine, "\n", 792 -> 792)
↲
^ Token(EndOfLine, "\n", 793 -> 793)
Inline `code`↲
^^^^^^^ Token(Text, "Inline ", 794 -> 800)
       ^ Token(Backtick, "`", 801 -> 801)
        ^^^^ Token(Text, "code", 802 -> 805)
            ^ Token(Backtick, "`", 806 -> 806)
             ^ Token(EndOfLine, "\n", 807 -> 807)
↲
^ Token(EndOfLine, "\n", 808 -> 808)
Block code "fences"↲
^^^^^^^^^^^^^^^^^^^ Token(Text, "Block code \"fences\"", 809 -> 827)
                   ^ Token(EndOfLine, "\n", 828 -> 828)
↲
^ Token(EndOfLine, "\n", 829 -> 829)
```↲
^^^ Token(Backtick, "```", 830 -> 832)
   ^ Token(EndOfLine, "\n", 833 -> 833)
Sample text here...↲
^^^^^^^^^^^^^^^^^^^ Token(Text, "Sample text here...", 834 -> 852)
                   ^ Token(EndOfLine, "\n", 853 -> 853)
```↲
^^^ Token(Backtick, "```", 854 -> 856)
   ^ Token(EndOfLine, "\n", 857 -> 857)
↲
^ Token(EndOfLine, "\n", 858 -> 858)
Syntax highlighting↲
^^^^^^^^^^^^^^^^^^^ Token(Text, "Syntax highlighting", 859 -> 877)
                   ^ Token(EndOfLine, "\n", 878 -> 878)
↲
^ Token(EndOfLine, "\n", 879 -> 879)
``` js↲
^^^ Token(Backtick, "```", 880 -> 882)
   ^^^ Token(Text, " js", 883 -> 885)
      ^ Token(EndOfLine, "\n", 886 -> 886)
var foo = function (bar) {↲
^^^^^^^^^^^^^^^^^^^ Token(Text, "var foo = function ", 887 -> 905)
                   ^ Token(ParenthesisLeft, "(", 906 -> 906)
                    ^^^ Token(Text, "bar", 907 -> 909)
                       ^ Token(ParenthesisRight, ")", 910 -> 910)
                        ^ Token(Text, " ", 911 -> 911)
                         ^ Token(CurlybraceLeft, "{", 912 -> 912)
                          ^ Token(EndOfLine, "\n", 913 -> 913)
  return bar++;↲
^^ Token(Whitespace, "  ", 914 -> 915)
  ^^^^^^^^^^^^^ Token(Text, "return bar++;", 916 -> 928)
               ^ Token(EndOfLine, "\n", 929 -> 929)
};↲
^ Token(CurlybraceRight, "}", 930 -> 930)
 ^ Token(Text, ";", 931 -> 931)
  ^ Token(EndOfLine, "\n", 932 -> 932)
↲
^ Token(EndOfLine, "\n", 933 -> 933)
console.log(foo(5));↲
^^^^^^^^^^^ Token(Text, "console.log", 934 -> 944)
           ^ Token(ParenthesisLeft, "(", 945 -> 945)
            ^^^ Token(Text, "foo", 946 -> 948)
               ^ Token(ParenthesisLeft, "(", 949 -> 949)
                ^ Token(Text, "5", 950 -> 950)
                 ^^ Token(ParenthesisRight, "))", 951 -> 952)
                   ^ Token(Text, ";", 953 -> 953)
                    ^ Token(EndOfLine, "\n", 954 -> 954)
```↲
^^^ Token(Backtick, "```", 955 -> 957)
   ^ Token(EndOfLine, "\n", 958 -> 958)
↲
^ Token(EndOfLine, "\n", 959 -> 959)
## Links↲
^^ Token(Hash, "##", 960 -> 961)
  ^^^^^^ Token(Text, " Links", 962 -> 967)
        ^ Token(EndOfLine, "\n", 968 -> 968)
↲
^ Token(EndOfLine, "\n", 969 -> 969)
[link text](example.com)↲
^ Token(BracketLeft, "[", 970 -> 970)
 ^^^^^^^^^ Token(Text, "link text", 971 -> 979)
          ^ Token(BracketRight, "]", 980 -> 980)
           ^ Token(ParenthesisLeft, "(", 981 -> 981)
            ^^^^^^^^^^^ Token(Text, "example.com", 982 -> 992)
                       ^ Token(ParenthesisRight, ")", 993 -> 993)
                        ^ Token(EndOfLine, "\n", 994 -> 994)
↲
^ Token(EndOfLine, "\n", 995 -> 995)
[link with title](example.com)↲
^ Token(BracketLeft, "[", 996 -> 996)
 ^^^^^^^^^^^^^^^ Token(Text, "link with title", 997 -> 1011)
                ^ Token(BracketRight, "]", 1012 -> 1012)
                 ^ Token(ParenthesisLeft, "(", 1013 -> 1013)
                  ^^^^^^^^^^^ Token(Text, "example.com", 1014 -> 1024)
                             ^ Token(ParenthesisRight, ")", 1025 -> 1025)
                              ^ Token(EndOfLine, "\n", 1026 -> 1026)
↲
^ Token(EndOfLine, "\n", 1027 -> 1027)
## Images↲
^^ Token(Hash, "##", 1028 -> 1029)
  ^^^^^^^ Token(Text, " Images", 1030 -> 1036)
         ^ Token(EndOfLine, "\n", 1037 -> 1037)
↲
^ Token(EndOfLine, "\n", 1038 -> 1038)
![Minion](example.com)↲
^ Token(Exclamation, "!", 1039 -> 1039)
 ^ Token(BracketLeft, "[", 1040 -> 1040)
  ^^^^^^ Token(Text, "Minion", 1041 -> 1046)
        ^ Token(BracketRight, "]", 1047 -> 1047)
         ^ Token(ParenthesisLeft, "(", 1048 -> 1048)
          ^^^^^^^^^^^ Token(Text, "example.com", 1049 -> 1059)
                     ^ Token(ParenthesisRight, ")", 1060 -> 1060)
                      ^ Token(EndOfLine, "\n", 1061 -> 1061)
![Stormtroopocat](example.com)↲
^ Token(Exclamation, "!", 1062 -> 1062)
 ^ Token(BracketLeft, "[", 1063 -> 1063)
  ^^^^^^^^^^^^^^ Token(Text, "Stormtroopocat", 1064 -> 1077)
                ^ Token(BracketRight, "]", 1078 -> 1078)
                 ^ Token(ParenthesisLeft, "(", 1079 -> 1079)
                  ^^^^^^^^^^^ Token(Text, "example.com", 1080 -> 1090)
                             ^ Token(ParenthesisRight, ")", 1091 -> 1091)
                              ^ Token(EndOfLine, "\n", 1092 -> 1092)
↲
^ Token(EndOfLine, "\n", 1093 -> 1093)
Like links, Images also have a footnote style syntax↲
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Text, "Like links, Images also have a footnote style syntax", 1094 -> 1145)
                                                    ^ Token(EndOfLine, "\n", 1146 -> 1146)
↲
^ Token(EndOfLine, "\n", 1147 -> 1147)
## Custom stuff:↲
^^ Token(Hash, "##", 1148 -> 1149)
  ^^^^^^^^^^^^^^ Token(Text, " Custom stuff:", 1150 -> 1163)
                ^ Token(EndOfLine, "\n", 1164 -> 1164)
%{{↲
^ Token(Percent, "%", 1165 -> 1165)
 ^^ Token(CurlybraceLeft, "{{", 1166 -> 1167)
   ^ Token(EndOfLine, "\n", 1168 -> 1168)
    templates here↲
^^^^ Token(Whitespace, "    ", 1169 -> 1172)
    ^^^^^^^^^^^^^^ Token(Text, "templates here", 1173 -> 1186)
                  ^ Token(EndOfLine, "\n", 1187 -> 1187)
    or lists↲
^^^^ Token(Whitespace, "    ", 1188 -> 1191)
    ^^^^^^^^ Token(Text, "or lists", 1192 -> 1199)
            ^ Token(EndOfLine, "\n", 1200 -> 1200)
}}↲
^^ Token(CurlybraceRight, "}}", 1201 -> 1202)
  ^ Token(EndOfLine, "\n", 1203 -> 1203)
↲
^ Token(EndOfLine, "\n", 1204 -> 1204)
### Tex:↲
^^^ Token(Hash, "###", 1205 -> 1207)
   ^^^^^ Token(Text, " Tex:", 1208 -> 1212)
        ^ Token(EndOfLine, "\n", 1213 -> 1213)
↲
^ Token(EndOfLine, "\n", 1214 -> 1214)
inline $Tex$↲
^^^^^^^ Token(Text, "inline ", 1215 -> 1221)
       ^ Token(DollarSign, "$", 1222 -> 1222)
        ^^^ Token(Text, "Tex", 1223 -> 1225)
           ^ Token(DollarSign, "$", 1226 -> 1226)
            ^ Token(EndOfLine, "\n", 1227 -> 1227)
↲
^ Token(EndOfLine, "\n", 1228 -> 1228)
$$↲
^^ Token(DollarSign, "$$", 1229 -> 1230)
  ^ Token(EndOfLine, "\n", 1231 -> 1231)
None inline↲
^^^^^^^^^^^ Token(Text, "None inline", 1232 -> 1242)
           ^ Token(EndOfLine, "\n", 1243 -> 1243)
$$↲
^^ Token(DollarSign, "$$", 1244 -> 1245)
  ^ Token(EndOfLine, "\n", 1246 -> 1246)
↲
^ Token(EndOfLine, "\n", 1247 -> 1247)

